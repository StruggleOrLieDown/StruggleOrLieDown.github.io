{"./":{"url":"./","title":"wyfyjc.com 惟愿","keywords":"","body":"Mr.Zhou Blog Just hope, in the wind and rain of the night can also move forward. 最近更新 Tue Jun 08 2021Rust 前瞻 > Rust 基础Rust 前瞻Rust 前瞻 > 所有权Rust 前瞻 > 结构体手搓数据结构wyfyjc.com 惟愿 待从头 六月份，又闷又热，打不起精神。删了一切，一张白纸才好下笔 更新不定，道法自然 推荐阅读 关于我 个人联系方式：邮箱、掘金 Mr.Zhou Blog - GitHub PagesLast updated at： 2021-06-08 14:04:05 "},"手搓数据结构/":{"url":"手搓数据结构/","title":"手搓数据结构","keywords":"","body":"概述 在计算机科学中，数据结构（英语：data structure）是计算机中存储、组织数据的方式。 数据结构意味着介面或封装：一个数据结构可被视为两个函数之间的介面，或者是由数据类型联合组成的存储内容的访问方法封装。 大多数数据结构都由数列、记录、可辨识联合、引用等基本类型构成。举例而言，可为空的引用（nullable reference）是引用与可辨识联合的结合体，而最简单的链式结构链表则是由记录与可空引用构成。 数据结构可透过程式语言所提供的数据类型、引用及其他操作加以实现。一个设计良好的数据结构，应该在尽可能使用较少的时间与空间资源的前提下，支援各种程式执行。 不同种类的数据结构适合不同种类的应用，部分资料结构甚至是为了解决特定问题而设计出来的。例如 B 树即为加快树状结构存取速度而设计的资料结构，常被应用在资料库和档案系统上。 正确的数据结构选择可以提高演算法的效率（请参考演算法效率（英语：algorithmic efficiency））。在电脑程式设计的过程中，选择适当的数据结构是一项重要工作。许多大型系统的编写经验显示，程式设计的困难程度与最终成果的质量与表现，取决于是否选择了最适合的数据结构。 系统架构的关键因素是数据结构而非算法的见解，导致了多种形式化的设计方法与编程语言的出现。绝大多数的语言都带有某种程度上的模块化思想，透过将数据结构的具体实现封装隐藏于使用者介面之后的方法，来让不同的应用程序能够安全地重用这些数据结构。 C++、Java、Python 等 面向对象的编程语言可使用类 (计算机科学) 来达到这个目的。 因为数据结构概念的普及，现代编程语言及其 API 中都包含了多种预设的数据结构，例如 C++ 标准模板库中的容器、 Java 集合框架以及微软的. NET Framework。 上述介绍引用自维基百科，这里做一点个人的理解。数据结构的理论学习，必须通过编程语言加以实现与应用，如此才是真的理解了数据结构的重要与魅力。维基百科的末尾提到了 Java 的集合框架，这里，也是通过 Java 中的具体实现类对数据结构做解释，例如 LinkedList 对于链表的实现 理解 在计算机中，所处理的数据，按照一定的结构进行组织、存储，其中的结构就是数据结构。这直接影响着计算机对于数据的操作（读取、修改），广义上理解就是程序的运行速度 对于一份数据，它存在 数据元素 与 数据项 的概念。数据元素是一份数据的基本组成单位，而一个数据元素由若干个数据项组成，数据项是不可切分的最小单位。以人群为例，人群是一份数据，人就是一个单独的数据元素，人的姓名、年龄就是数据项。数据元素与数据项的划分，需要结合实际的场景。若将人作为一份数据，那么数据元素、数据项又可以随之改变 还需要理解的是，数据结构与数据对象的概念。数据结构指的是：多个数据元素存在的特定联系；数据对象指的是：多个数据元素存在的相似特征。听起来，二者似乎是一个概念。事实上也是如此，就看具体的划分场景 另外，这些相似且模糊的概念，了解即可，无须深究，这不是学习数据结构的中心，只能算是开胃小菜。全文，理解的数据以何种的结构、形式存储在计算机的内存中 数据的结构，需要从三个方向考虑，重点是逻辑结构 逻辑结构 存储结构 数据运算 对于逻辑结构，可以划分为集合、线性表、树、图四类。而集合并不重要，所以缩减为两类，线性表、非线性表，示意图如下 线性表，是以一条线的形式存储，存在前驱和后继的概念。上一节点是下一节点的前驱元素，下一节点是上一节点的后继元素 树，以现实中树的分叉而展示的数据结构，存在唯一的根元素，又可以称为最高父元素，其后分叉的元素称为子元素 图，数据元素之间的关系是多对多，一个元素可以指向多个元素，也可以被多个元素指向，与之前的线性表、树存在明显的不同 对于存储结构，指的是数据元素在物理存储上的关系，之前的逻辑结构是逻辑上的关系。可以划分为顺序存储、链式存储、索引存储、散列存储 再提一遍，数据结构指的是数据在内存中存储的结构、形式，这有利于理解存储结构，即物理存储 顺序存储：在内存中的存储，数据元素存储在一块空间中，物理上是连续的 链式存储：数据元素之间，无须保证物理上的连续，各个元素之前通过指针指向 索引存储：存在一张索引表，该索引表中存储着其它数据元素的指针，指向内存地址 散列存储暂不介绍，这涉及到了哈希的概念，参考 HashMap 对于数据的运算，也不做介绍。通过实际的 Java 容器类，才可以真正的理解数据结构的意义 Mr.Zhou Blog - GitHub PagesLast updated at： 2021-06-08 16:49:57 "},"Rust前瞻/":{"url":"Rust前瞻/","title":"Rust 前瞻","keywords":"","body":"Mr.Zhou Blog - GitHub PagesLast updated at： 2021-06-08 20:18:23 "},"Rust前瞻/Rust基础.html":{"url":"Rust前瞻/Rust基础.html","title":"Rust 基础","keywords":"","body":"变量与可变性 初次看到这个标题的时候，个人是有些懵的！不应该是变量与不可变性吗？ 不然，Rust 中的变量默认不可变，你需要改变自己的认知。换想一下，变量的默认可变真的好吗？ let a = 100; let b = '1'; println!(\"{} {}\", a, b) 上述是 Rust 变量的代码演示。变量使用 关键字 let 声明，可以自动的判断数据的所属类型 需要注意的是，Rust 中的打印输出语句，需要一个占位符，这并不是什么大问题。相反，必要的严谨会带来不错的体验 Rust 中的变量默认不可变。但在需要的时候，依旧可以改变变量的数据 let mut a = 100; a = 200; println!(\"{}\", a); 在 let 关键字与变量名之间，加入 mut 关键字，该变量就 具有可变性，修改其中的数据（不可变更数据的类型） 接下来，介绍 Rust 中的常量。常量使用 const 关键字定义，其中的数据一经定义则无法修改，也无法使用关键字 mut const NEW_YEAR: i32 = 2021; println!(\"{}\", NEW_YEAR); 上述的常量代码中，可以注意到，i32，在 Rust 为有符号整数三十二位，即 Rust 的常量必须指定其数据的类型，而默认的不可变变量则可以自动判断 除此之外，Rust 中还存在隐藏变量的设定，隐藏变量的对象不可以是常量 let a = 100; let a = a + 100; let a = \"AA\"; println!(\"{}\", a); 隐藏变量很好理解，通过声明同样名称的变量，隐藏之前声明的变量。上述的代码中，变量 a 第三次可以接收字符串，而之前是整数。隐藏变量的实质，是与之前变量同名的全新变量 这与之前的let mut完全不同，隐藏不了不仅可以修改数据的内容，也 可以改变元素的类型，它的作用是 重复利用变量名 数据类型 没错，Rust 中也存在数据类型的概念，切较为严格。之前，只是 Rust 可以自动的判断出数据的所属类型 Rust 是 静态类型语言，在 程序编译时，必须知道每个数据的所属类型 值得一提，Rust 中的数据类型也可以分为两类，标量类型、复合类型，可以理解为 Java 中的原始、引用两个类型 标量类型 先说整型，Rust 存在十二种整型类型。是的，你没有听错，不是 Java 中的四种 字节 有符号 无符号 8 bit i8 u8 16 bit i16 u16 32 bit i32 u32 64 bit i64 u64 128 bit i128 u128 arch isize usize 熟悉的感觉又回来了。Rust 只是将 Java 中的四个整型类型，细分为了有符号、无符号。同时添加了 128bit 的整型。真正存在差异的是 arch 类型 arch 类型的实际字节长度，是根据计算机架构决定的，在 64、32 位架构上，它的字节长度也就是 64、32 位 Rust 的默认整型是 32bit，当将整数字面量赋予变量时，默认接收的类型就是 32bit（i32），有符号三十二位字节 let a = 2147483647; println!(\"{}\", a); 在上述的代码示例中，取到了有符号 32 位 bit 的最大值 2147483647，之后加 1，则编译错误，超出了当前类型的取值范围 对于变量类型的声明，存在另一种写法。let a: u32 = 100; 与 let a = 100u32; 的作用是一致的。这种写法，不支持字节型（i16、u16） 再说浮点型，存在 f32、f64，分别代表单精度浮点、双精度浮点。默认的浮点类型是 f64，采用 IEEE-754 标准 let a: f32 = 100.0; let b: f64 = 200.0; 之后的布尔类型、字符类型，用法如下，无明显不同 let a: bool = true; let b: char = 'A'; 复合类型 多个类型组合成的类型，称为复合类型，理解为 Java 中的引用类型。Rust 中存在两个原生的复合类型，数组与元组，学习过 Python 的人应该会了解元组的概念 // 元组的声明 let t: (i16, char, bool) = (12, '1', true); // 元组解构 let (x, y, z) = t; println!(\"{}\", x); // 索引结构 println!(\"{}\", t.0); 上述代码介绍了元组的定义与使用。一个 元组中可以声明多个不同的数据类型，同时，可以通过 元组解构，单独使用其中的数据，支持索引结构的方式（索引从 0 开始） // 数组的基本定义，直接存储数据，再确定长度、类型 let array = [1, 2, 3, 4, 5, 6]; // 事先声明数组的类型、长度，再存储数据 // 声明数据长度为 3 数据类型为 i16 let array: [i16; 3] = [1, 2, 3]; // 批量声明数据 定义 3 个整型 i32 数据 10 let array = [10; 3]; // 数组数据的索引取出 println!(\"{}\", array[2]); 元组与数组类似，长度已经定义，则无法改变。但数组中的数据类型唯一！ Mr.Zhou Blog - GitHub PagesLast updated at： 2021-06-08 23:02:14 "},"Rust前瞻/所有权.html":{"url":"Rust前瞻/所有权.html","title":"所有权","keywords":"","body":"Mr.Zhou Blog - GitHub PagesLast updated at： 2021-06-08 20:18:23 "},"Rust前瞻/结构体.html":{"url":"Rust前瞻/结构体.html","title":"结构体","keywords":"","body":"Mr.Zhou Blog - GitHub PagesLast updated at： 2021-06-08 20:18:23 "}}